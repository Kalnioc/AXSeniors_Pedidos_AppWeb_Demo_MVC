@model AXSeniors_Pedidos_Demo_ENTITY.PedidoCabeceraBE
@{
    ViewBag.Title = "Editar Pedido";
    var productos = ViewBag.Productos as List<AXSeniors_Pedidos_Demo_ENTITY.ProductoBE>;
    var clientes = ViewBag.Clientes as List<AXSeniors_Pedidos_Demo_ENTITY.ClienteBE>;
    var estados = ViewBag.Estados as List<AXSeniors_Pedidos_Demo_ENTITY.EstadoBE>;
    var tipoComprobantes = ViewBag.Comprobantes as List<AXSeniors_Pedidos_Demo_ENTITY.TipoComprobanteBE>;
}

<div class="container mt-4">
    <h2>Editar Pedido</h2>
    @using (Html.BeginForm("Edit", "Pedido", FormMethod.Post))
    {
        @Html.HiddenFor(m => m.PedidoCabeceraId)

        if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }

        <div class="row mb-3">
            <div class="col-md-4">
                <label>Cliente</label>
                @Html.DropDownListFor(m => m.ClienteId,
                    new SelectList(clientes, "ClienteId", "NombreCompleto", Model.ClienteId),
                    "-- Seleccione --",
                    new { @class = "form-control", required = "required" })
            </div>

            <div class="col-md-4">
                <label>Comprobante</label>
                @Html.DropDownListFor(m => m.TipoComprobanteId,
                    new SelectList(tipoComprobantes, "TipoComprobanteId", "Nombre", Model.TipoComprobanteId),
                    "-- Seleccione --",
                    new { @class = "form-control" })
            </div>

            <div class="col-md-4">
                <label>Estado</label>
                @Html.DropDownListFor(m => m.EstadoId,
                    new SelectList(estados, "EstadoId", "Nombre", Model.EstadoId),
                    "-- Seleccione --",
                    new { @class = "form-control", required = "required" })
            </div>
        </div>

        <hr />
        <h4>Detalle del Pedido</h4>
        <table class="table" id="detalle-pedido">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th>% Desc.</th>
                    <th>Total</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.PedidoDetalleLista.Count; i++)
                {
                    var item = Model.PedidoDetalleLista[i];
                    <tr>
                        <td>
                            <input type="hidden" name="PedidoDetalleId[]" value="@item.PedidoDetalleId" />
                            <input type="hidden" name="Estado[]" value="modificar" class="estado-linea" />
                            <select name="ProductoId[]" class="form-control" onchange="actualizarPrecio(this); marcarModificado(this);" required>
                                @foreach (var p in productos)
                                {
                                    var selected = p.ProductoId == item.ProductoId ? "selected" : "";
                                    <option value="@p.ProductoId" data-precio="@p.Precio" @Html.Raw(selected)>@p.Nombre</option>
                                }
                            </select>
                        </td>
                        <td>
                            <input type="number" name="CantidadItem[]" class="form-control" min="1" value="@item.CantidadItem" onchange="actualizarTotal(this); marcarModificado(this);" required />
                            <input type="hidden" name="CantidadItemOriginal[]" value="@item.CantidadItem" />
                        </td>
                        <td><input type="number" name="PrecioUnitario[]" class="form-control" value="@item.PrecioUnitario" readonly /></td>
                        <td><input type="number" name="DescuentoItem[]" class="form-control" value="@item.DescuentoItem" min="0" onchange="actualizarTotal(this); marcarModificado(this);" required /></td>
                        <td><input type="number" name="TotalItem[]" class="form-control" value="@item.TotalItem" readonly /></td>
                        <td><button type="button" class="btn btn-danger" onclick="eliminarFila(this)">X</button></td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button" class="btn btn-secondary mb-3" onclick="agregarFila()">+ Agregar Línea</button>

        <button type="submit" class="btn btn-success">Actualizar Pedido</button>
        <a href="@Url.Action("Index", "Pedido")" class="btn btn-outline-secondary">Cancelar</a>
    }
</div>

<script>
    const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Productos));

    function agregarFila() {
        const tbody = document.querySelector("#detalle-pedido tbody");
        const row = document.createElement("tr");

        row.innerHTML = `
            <td>
                <input type="hidden" name="PedidoDetalleId[]" value="0" />
                <input type="hidden" name="Estado[]" value="nuevo" class="estado-linea" />
                <select name="ProductoId[]" class="form-control" onchange="actualizarPrecio(this); marcarModificado(this);" required>
                    ${productos.map(p => `<option value="${p.ProductoId}" data-precio="${p.Precio}">${p.Nombre}</option>`).join('')}
                </select>
            </td>
            <td>
                <input type="number" name="CantidadItem[]" class="form-control" min="1" value="1" required onchange="actualizarTotal(this); marcarModificado(this);" />
                <input type="hidden" name="CantidadItemOriginal[]" value="0" />
            </td>
            <td><input type="number" name="PrecioUnitario[]" class="form-control" step="0.01" readonly /></td>
            <td><input type="number" name="DescuentoItem[]" class="form-control" value="0" min="0" onchange="actualizarTotal(this); marcarModificado(this);" required /></td>
            <td><input type="number" name="TotalItem[]" class="form-control" readonly /></td>
            <td><button type="button" class="btn btn-danger" onclick="eliminarFila(this)">X</button></td>
        `;

        tbody.appendChild(row);
        actualizarPrecio(row.querySelector('select'));
    }

    function actualizarPrecio(select) {
        const precio = select.selectedOptions[0].dataset.precio;
        const row = select.closest('tr');
        row.querySelector('[name="PrecioUnitario[]"]').value = precio;
        actualizarTotal(row.querySelector('[name="CantidadItem[]"]'));
    }

    function actualizarTotal(input) {
        const row = input.closest('tr');
        const cantidad = Math.max(1, parseFloat(row.querySelector('[name="CantidadItem[]"]').value) || 1);
        const precio = parseFloat(row.querySelector('[name="PrecioUnitario[]"]').value) || 0;
        const descuento = Math.max(0, parseFloat(row.querySelector('[name="DescuentoItem[]"]').value) || 0);

        row.querySelector('[name="CantidadItem[]"]').value = cantidad;
        row.querySelector('[name="DescuentoItem[]"]').value = descuento;

        const total = cantidad * precio * (1 - descuento / 100);
        row.querySelector('[name="TotalItem[]"]').value = total.toFixed(2);
    }

    function eliminarFila(button) {
        const row = button.closest('tr');
        row.classList.add('eliminado');
        row.querySelector('input[name="Estado[]"]').value = "eliminar";
        row.style.opacity = '0.6';
        row.style.textDecoration = 'line-through';
        row.querySelectorAll('input, select').forEach(el => {
            if (el.name !== "Estado[]" && el.name !== "PedidoDetalleId[]") el.readOnly = true;
        });
    }

    function marcarModificado(input) {
        const row = input.closest('tr');
        const estado = row.querySelector('.estado-linea');
        if (estado && estado.value !== 'nuevo') {
            estado.value = 'modificar';
        }
    }
</script>
